heatmap.2(mat_norm,Colv = T,Rowv = T, symbreak=TRUE, trace='none', breaks = breaks,
cexRow = 0.5, margins =c(12,9),col=color.palette,
ColSideColors=colour_palette[pheno$louvain_r0.8[order(pheno$louvain_r0.8)]], labCol = F)
dev.off()
#save heatmap as png without labels
png("../../output/heatmap_neural_subtype_markers.png", width = 8, height = 5, units = "in", res = 300)
heatmap.2(mat_norm,Colv = T,Rowv = T, symbreak=TRUE, trace='none', breaks = breaks,
cexRow = 1, margins =c(12,9),col=color.palette,
ColSideColors=colour_palette[pheno$louvain_r0.8[order(pheno$louvain_r0.8)]], labCol = F, labRow = F)
dev.off()
535/16
300/9
#load libraries
library(gplots)
library(RColorBrewer)
#read in gene modules
m = readRDS("../../output/gene_modules/all_data/antler_obj.RDS")
dat_markers= read.csv("../../output/wilcox_markers.csv")
clusters= c("Early","Early_neurons","Late_1.1","Late_1.2","Late_2.1","Late_2.2","Late_2.3","Late_2.4",
"Late_2.5","Late_2.6","Late_neurons","Adult_neurons","Glia_1","Glia_2")
modules = m$topCorr_DR$genemodules
modules[[1]]
head(dat_markers)
#read in gene modules
m = readRDS("../../output/gene_modules/all_data/antler_obj.RDS")
modules = m$topCorr_DR$genemodules
dat_markers= read.csv("../../output/wilcox_markers.csv")
clusters= c("Early","Early_neurons","Late_1.1","Late_1.2","Late_2.1","Late_2.2","Late_2.3","Late_2.4",
"Late_2.5","Late_2.6","Late_neurons","Adult_neurons","Glia_1","Glia_2")
results = matrix(, nrow = 0, ncol = length(clusters))
for (module in modules){
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = [markers$cluster == cluster,]
results = matrix(, nrow = 0, ncol = length(clusters))
for (module in modules){
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, mean(cluster_markers$logfoldchanges))
}
rbind(results,module_results)
}
results
results = matrix(, nrow = 0, ncol = length(clusters))
for (module in modules){
print(module)
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, mean(cluster_markers$logfoldchanges))
}
rbind(results,module_results)
}
module
markers = dat_markers[dat_markers$genes %in% module,]
markers
module_results = c()
cluster_markers = markers[markers$cluster == cluster,]
cluster_markers
mean(cluster_markers$logfoldchanges)
cluster_markers
module_results = c(module_results, mean(cluster_markers$logfoldchanges))
module_results
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, mean(cluster_markers$logfoldchanges))
}
module_results
rbind(results,module_results)
results = matrix(, nrow = 0, ncol = length(clusters))
for (module in modules){
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, mean(cluster_markers$logfoldchanges))
}
rbind(results,module_results)
}
results = matrix(, nrow = 0, ncol = length(clusters))
for (module in modules){
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, mean(cluster_markers$logfoldchanges))
}
results = rbind(results,module_results)
}
results
dim(results)
image(results)
image(t(module_results))
image(t(results))
colnames(results) = clusters
dim(results)
rownames(results) = 1:dim(results)[1]
write.csv(results,"../../output/gene_modules/all_data/module_louvain_lfc.csv", quote = F)
results = matrix(, nrow = 0, ncol = length(clusters))
i = 1
module_names = c()
for (module in modules){
if length(module > 9){
results = matrix(, nrow = 0, ncol = length(clusters))
i = 1
module_names = c()
for (module in modules){
if (length(module) > 9){
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, mean(cluster_markers$logfoldchanges))
}
results = rbind(results,module_results)
module_names = c(module_names, i)
}
i += 1
results = matrix(, nrow = 0, ncol = length(clusters))
i = 1
module_names = c()
for (module in modules){
if (length(module) > 9){
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, mean(cluster_markers$logfoldchanges))
}
results = rbind(results,module_results)
module_names = c(module_names, i)
}
i = i+1
}
colnames(results) = clusters
rownames(results) = module_names
write.csv(results,"../../output/gene_modules/all_data/module_louvain_lfc_g10.csv", quote = F)
image(results)
library(gplots)
heatmap.2(results)
library(gplots)
png("../../output/hgene_modules/all_data/louvain_hm_gm", width = 8, height = 5, units = "in", res = 300)
heatmap.2(results)
library(gplots)
png("../../output/gene_modules/all_data/louvain_hm_gm.png", width = 8, height = 5, units = "in", res = 300)
heatmap.2(results)
dev.off()
png("../../output/gene_modules/all_data/louvain_hm_gm.png", width = 8, height = 20, units = "in", res = 300)
heatmap.2(results)
dev.off()
#read in gene modules
m = readRDS("../../output/gene_modules/all_data/antler_obj.RDS")
modules = m$topCorr_DR$genemodules
dat_markers= read.csv("../../output/wilcox_markers.csv")
clusters= c("Early","Early_neurons","Late_1.1","Late_1.2","Late_2.1","Late_2.2","Late_2.3","Late_2.4",
"Late_2.5","Late_2.6","Late_neurons","Adult_neurons","Glia_1","Glia_2")
results = matrix(, nrow = 0, ncol = length(clusters))
i = 1
module_names = c()
for (module in modules){
if (length(module) > 9){
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, median(cluster_markers$logfoldchanges))
}
results = rbind(results,module_results)
module_names = c(module_names, i)
}
i = i+1
}
colnames(results) = clusters
rownames(results) = module_names
write.csv(results,"../../output/gene_modules/all_data/module_louvain_lfc_g10.csv", quote = F)
library(gplots)
png("../../output/gene_modules/all_data/louvain_hm_gm.png", width = 8, height = 20, units = "in", res = 300)
heatmap.2(results)
dev.off()
library(gplots)
png("../../output/gene_modules/all_data/louvain_hm_gm_mean.png", width = 8, height = 20, units = "in", res = 300)
heatmap.2(results,col=color.palette, trace = "none")
dev.off()
extreme = (max(abs(min(results)),abs(max(results))))
breaks = seq(from=-extreme, to=max(extreme), length.out=100)
library(gplots)
png("../../output/gene_modules/all_data/louvain_hm_gm_mean.png", width = 8, height = 20, units = "in", res = 300)
heatmap.2(results,col=color.palette, trace = "none", breaks = breaks)
dev.off()
i = 1
module_names = c()
for (module in modules){
if (length(module) > 9){
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, mean(cluster_markers$logfoldchanges))
}
results = rbind(results,module_results)
module_names = c(module_names, i)
}
i = i+1
}
colnames(results) = clusters
rownames(results) = module_names
results = matrix(, nrow = 0, ncol = length(clusters))
i = 1
module_names = c()
for (module in modules){
if (length(module) > 9){
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, mean(cluster_markers$logfoldchanges))
}
results = rbind(results,module_results)
module_names = c(module_names, i)
}
i = i+1
}
colnames(results) = clusters
rownames(results) = module_names
write.csv(results,"../../output/gene_modules/all_data/module_louvain_lfc_g10.csv", quote = F)
color.palette = colorRampPalette(c("blue", "white", "red"))
extreme = (max(abs(min(results)),abs(max(results))))
breaks = seq(from=-extreme, to=max(extreme), length.out=100)
library(gplots)
png("../../output/gene_modules/all_data/louvain_hm_gm_mean.png", width = 8, height = 20, units = "in", res = 300)
heatmap.2(results,col=color.palette, trace = "none", breaks = breaks)
dev.off()
results = matrix(, nrow = 0, ncol = length(clusters))
i = 1
module_names = c()
for (module in modules){
if (length(module) > 9){
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, median(cluster_markers$logfoldchanges))
}
results = rbind(results,module_results)
module_names = c(module_names, i)
}
i = i+1
}
colnames(results) = clusters
rownames(results) = module_names
write.csv(results,"../../output/gene_modules/all_data/module_louvain_lfc_g10_median.csv", quote = F)
color.palette = colorRampPalette(c("blue", "white", "red"))
extreme = (max(abs(min(results)),abs(max(results))))
breaks = seq(from=-extreme, to=max(extreme), length.out=100)
library(gplots)
png("../../output/gene_modules/all_data/louvain_hm_gm_median.png", width = 8, height = 20, units = "in", res = 300)
heatmap.2(results,col=color.palette, trace = "none", breaks = breaks)
dev.off()
log(0.5)
-log(0,05)
-log(0.05)
-log(0.005)
#load libraries
library(gplots)
library(RColorBrewer)
#read in gene modules
m = readRDS("../../output/gene_modules/all_data/antler_obj.RDS")
modules = m$topCorr_DR$genemodules
dat_markers= read.csv("../../output/wilcox_markers.csv")
clusters= c("Early","Early_neurons","Late_1.1","Late_1.2","Late_2.1","Late_2.2","Late_2.3","Late_2.4",
"Late_2.5","Late_2.6","Late_neurons","Adult_neurons","Glia_1","Glia_2")
results = matrix(, nrow = 0, ncol = length(clusters))
i = 1
module_names = c()
for (module in modules){
if (length(module) > 9){
markers = dat_markers[dat_markers$genes %in% module,]
module_results = c()
for (cluster in clusters){
cluster_markers = markers[markers$cluster == cluster,]
module_results = c(module_results, median(cluster_markers$logfoldchanges))
}
results = rbind(results,module_results)
module_names = c(module_names, i)
}
i = i+1
}
results = matrix(, nrow = 0, ncol = length(clusters))
i = 1
module_names = c()
cluster_markers
other_markers ==   markers[markers$cluster != cluster,]
other_markers =  markers[markers$cluster != cluster,]
dim(other_markers)
wilcox.test(cluster_markers$logfoldchanges,other_markers$logfoldchanges)
res = wilcox.test(cluster_markers$logfoldchanges,other_markers$logfoldchanges)
res
?wilcox.test
957.42-250
707.42/2
459.13-353.71
105.42 + 210
mat = c(c(1,2,3),c(1,2,3),c(1,2,3))
rownames(mat) = c(1,2,3)
mat
mat = rbind(c(1,2,3),c(1,2,3),c(1,2,3))
rownames(mat) = c(1,2,3)
mat
rownames(mat) = c(3,2,1)
mat
409^2
(409^2-409)/2
## read in network for early module
network = read.csv("../../output/gene_modules/all_data/pathway_commons/early_late_pathway_commons.sif",sep = "\t", header = F, stringsAsFactors = F)
## read in network for early module
network = read.csv("../../output/gene_modules/all_data/pathway_commons/early_late_pathway_commons.sif",sep = "\t", header = F, stringsAsFactors = F)
network = read.csv("../../output/gene_modules/all_data/networks/early_late_pathway_commons.sif",sep = "\t", header = F, stringsAsFactors = F)
conversions = read.csv("../../data/mouse_human_homologues.csv", stringsAsFactors = F)
rownames(conversions) = conversions$X9606
network$V1 = conversions[network$V1,]$X10090
network$V3 = conversions[network$V3,]$X10090
##extract list of unique genes in network
network_genes = unique(c(network$V1, network$V3))
## read in genes in early module with CSDE1 binding sites (iclip)
iclip_results = read.csv("../../output/gene_modules/all_data/csde1_iCLIP_GM_results.csv", stringsAsFactors = F)
iclip_results
iclip_results[1:10,1:10]
head(iclip_results)
iclip_results = read.csv("../../output/gene_modules/all_data/csde1_iCLIP_GM_results.csv", stringsAsFactors = F)
iclip_genes = c()
modules = c(16,17,3,68,62,72,71,82,79,
83,81,80)
for (module in modules){
module_genes_iclip = iclip_results[iclip_results$gene_module == module,]$genes
iclip_genes = c(iclip_genes,strsplit(module_genes_iclip,'\\|')[[1]])
}
iclip_genes
## read in genes in early module DE upon CSDE1 knockdown
kd_results = read.csv("../../output/gene_modules/all_data/csde1_KD_GM_results.csv", stringsAsFactors = F)
(161^2-161)/2
head(kd_results)
genes_downreg = c()
for (module in modules){
module_genes_downreg = kd_results[kd_results$module == module,]$decreased_genes
genes_downreg = strsplit(early_genes_downreg,'\\|')[[1]]
}
genes_downreg = c()
for (module in modules){
module_genes_downreg = kd_results[kd_results$module == module,]$decreased_genes
genes_downreg = strsplit(module_genes_downreg,'\\|')[[1]]
}
genes_downreg
genes_downreg = c()
for (module in modules){
module_genes_downreg = kd_results[kd_results$module == module,]$decreased_genes
genes_downreg = c(genes_downreg,strsplit(module_genes_downreg,'\\|')[[1]])
}
genes_downreg
genes_upreg = c()
for (module in modules){
module_genes_upreg = kd_results[kd_results$module == module,]$decreased_genes
genes_upreg = strsplit(module_genes_upreg,'\\|')[[1]]
}
genes_upreg
genes_upreg = c()
for (module in modules){
module_genes_upreg = kd_results[kd_results$module == module,]$decreased_genes
genes_upreg = c(genes_upreg,strsplit(module_genes_upreg,'\\|')[[1]])
}
genes_upreg
genes_upreg = c()
for (module in modules){
module_genes_upreg = kd_results[kd_results$module == module,]$increased_genes
genes_upreg = c(genes_upreg,strsplit(module_genes_upreg,'\\|')[[1]])
}
genes_upreg
genes_downreg = c()
for (module in modules){
module_genes_downreg = kd_results[kd_results$module == module,]$decreased_genes
genes_downreg = c(genes_downreg,strsplit(module_genes_downreg,'\\|')[[1]])
}
genes_upreg = c()
for (module in modules){
module_genes_upreg = kd_results[kd_results$module == module,]$increased_genes
genes_upreg = c(genes_upreg,strsplit(module_genes_upreg,'\\|')[[1]])
}
network_genes = data.frame(network_genes)
network_genes$iclip = "False"
network_genes$iclip[network_genes$network_genes %in% early_genes_iclip] = "True"
network_genes$iclip = "False"
network_genes$iclip[network_genes$network_genes %in% genes_iclip] = "True"
network_genes$iclip = "False"
network_genes$iclip[network_genes$network_genes %in% iclip_genes] = "True"
network_genes$downreg = "False"
network_genes$downreg[network_genes$network_genes %in% genes_downreg] = "True"
network_genes$downreg = "False"
network_genes$downreg[network_genes$network_genes %in% genes_downreg] = "True"
network_genes$upreg = "False"
network_genes$upreg[network_genes$network_genes %in% genes_upreg] = "True"
write.csv(network_genes,"../../output/gene_modules/all_data/early_late_network_annotations.csv",row.names = F,quote = F)
write.table(network,"../../output/gene_modules/all_data/early_late_network.sif",row.names = F,quote = F, col.names = F, sep = "\t")
network_genes$network_genes
## read in network for early module
network = read.csv("../../output/gene_modules/all_data/networks/early_late_pathway_commons.sif",sep = "\t", header = F, stringsAsFactors = F)
##convert to mouse
conversions = read.csv("../../data/mouse_human_homologues.csv", stringsAsFactors = F)
rownames(conversions) = conversions$X9606
network$V1 = conversions[network$V1,]$X10090
network$V3 = conversions[network$V3,]$X10090
##extract list of unique genes in network
network_genes = unique(c(network$V1, network$V3))
## read in genes in early module with CSDE1 binding sites (iclip)
iclip_results = read.csv("../../output/gene_modules/all_data/csde1_iCLIP_GM_results.csv", stringsAsFactors = F)
iclip_genes = c()
modules = c(16,17,3,68,62,72,71,82,79,
83,81,80)
for (module in modules){
module_genes_iclip = iclip_results[iclip_results$gene_module == module,]$genes
iclip_genes = c(iclip_genes,strsplit(module_genes_iclip,'\\|')[[1]])
}
## read in genes in early module DE upon CSDE1 knockdown
kd_results = read.csv("../../output/gene_modules/all_data/csde1_KD_GM_results.csv", stringsAsFactors = F)
genes_downreg = c()
for (module in modules){
module_genes_downreg = kd_results[kd_results$module == module,]$decreased_genes
genes_downreg = c(genes_downreg,strsplit(module_genes_downreg,'\\|')[[1]])
}
genes_upreg = c()
for (module in modules){
module_genes_upreg = kd_results[kd_results$module == module,]$increased_genes
genes_upreg = c(genes_upreg,strsplit(module_genes_upreg,'\\|')[[1]])
}
## create table of annotations for iclip data
network_genes = data.frame(network_genes)
network_genes$iclip = "False"
network_genes$iclip[network_genes$network_genes %in% iclip_genes] = "True"
network_genes$downreg = "False"
network_genes$downreg[network_genes$network_genes %in% genes_downreg] = "True"
network_genes$upreg = "False"
network_genes$upreg[network_genes$network_genes %in% genes_upreg] = "True"
network_genes$csde_KO = "False"
network_genes$csde_KO[network_genes$network_genes %in% genes_downreg] = "Downreg"
network_genes$csde_KO[network_genes$network_genes %in% genes_upreg] = "Upreg"
write.csv(network_genes,"../../output/gene_modules/all_data/early_late_network_annotations.csv",row.names = F,quote = F)
write.table(network,"../../output/gene_modules/all_data/early_late_network.sif",row.names = F,quote = F, col.names = F, sep = "\t")
getwd()
setwd("/home/anna/Documents/TrajectoryGeometry")
devtools::load_all()
devtools::build_vignettes()
devtools::load_all()
devtools::build_vignettes()
devtools::build_vignettes()
#load libraries
library(gplots)
library(RColorBrewer)
#read in data
counts = read.csv("../../output/adata_anno.csv")
pheno = read.csv("../../output/obs_anno.csv")
rownames(pheno) = pheno$index
mat = as.matrix(counts[,2:ncol(counts)])
colnames(mat) = names(counts)[2:ncol(counts)]
rownames(mat) = counts$index
#read in cell cycle genes
rbps = read.csv("../../data/RBPDB_v1.3.1_mouse_2012-11-21_CSV/RBPDB_v1.3.1_proteins_mouse_2012-11-21.csv", header = F)
head(rbps)
rbps$V5
markers = rbps$V5
markers = as.character(rbps$V5)
markers
clusters= c("Early","Early_neurons","Late_1.1","Late_1.2","Late_2.1","Late_2.2","Late_2.3","Late_2.4",
"Late_2.5","Late_2.6","Late_neurons","Adult_neurons","Glia_1","Glia_2")
markers[!(markers %in% rownames(mat))]
markers = markers[markers %in% rownames(mat)]
markers
#subset matrix for markers
mat_selected = mat[markers,]
#center gene expression values
mat_norm = mat_selected - rowMeans(mat_selected)
#set colours for clusters
colour_palette = c('#ffff00','#1ce6ff','#ff34ff','#ff4a46','#008941','#006fa6', '#a30059','#ffdbe5','#7a4900','#0000a6','#63ffac','#b79762','#004d43','#8fb0ff')
#order data by louvain clusters
pheno$louvain_r1.5 = factor(pheno$louvain_r1.5, levels = clusters)
mat_norm = mat_norm[,order(pheno$louvain_r1.5)]
#create heatmap
extreme = (max(abs(min(mat_norm)),abs(max(mat_norm))))
breaks = seq(from=-extreme, to=max(extreme), length.out=100)
pdf("../../output/heatmap_rbps.pdf", width =8, height = 12)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = F,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks,
ColSideColors=colour_palette[pheno$louvain_r1.5[order(pheno$louvain_r1.5)]], labCol = F)
dev.off()
#create heatmap without labels
pdf("../../output/heatmap_rbps_no_labels.pdf", width = 8, height = 5)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = F,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 1, margins =c(12,9),col=color.palette,breaks = breaks,
ColSideColors=colour_palette[pheno$louvain_r1.5[order(pheno$louvain_r1.5)]], labCol = F, labRow = F)
dev.off()
png("../../output/heatmap_cc.png", width = 8, height = 12, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = F,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks,
ColSideColors=colour_palette[pheno$louvain_r1.5[order(pheno$louvain_r1.5)]], RowSideColors = colour_palette_phase[colour_code], labCol = F)
dat_markers= read.csv("../../wilcox_markers.csv",stringsAsFactors = F)
dat_markers= read.csv("../../output/wilcox_markers.csv",stringsAsFactors = F)
dat_markers
