print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point() + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`), size = 1, , color = pt) +scale_color_gradientn(colours = rainbow(5))
print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point() + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colours = rainbow(5))
print(p)
glial$pt
glial_pt$pt
glial_pt = slingCurves(adata)$curve2$s[!(is.na(adata$slingPseudotime_2)),]
glial_pt = glial_pt[order(adata$slingPseudotime_2[!(is.na(adata$slingPseudotime_2))]),]
glial_pt =as.data.frame(glial_pt)
glial_pt$pt = adata$slingPseudotime_2[order(adata$slingPseudotime_2[!(is.na(adata$slingPseudotime_2))])]
neural_pt = slingCurves(adata)$curve1$s[!(is.na(adata$slingPseudotime_1)),]
neural_pt = neural_pt[order(adata$slingPseudotime_1[!(is.na(adata$slingPseudotime_1))]),]
neural_pt =as.data.frame(neural_pt)
neural_pt$pt = adata$slingPseudotime_1[order(adata$slingPseudotime_1[!(is.na(adata$slingPseudotime_1))])]
neural_early_pt = slingCurves(adata)$curve3$s[!(is.na(adata$slingPseudotime_3)),]
neural_early_pt = neural_early_pt[order(adata$slingPseudotime_3[!(is.na(adata$slingPseudotime_3))]),]
neural_early_pt =as.data.frame(neural_early_pt)
neural_early_pt$pt = adata$slingPseudotime_3[order(adata$slingPseudotime_3[!(is.na(adata$slingPseudotime_3))])]
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point() + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colours = rainbow(5))
print(p)
glial_pt$pt
glial_pt = slingCurves(adata)$curve2$s[!(is.na(adata$slingPseudotime_2)),]
glial_pt = glial_pt[order(adata$slingPseudotime_2[!(is.na(adata$slingPseudotime_2))]),]
glial_pt =as.data.frame(glial_pt)
glial_pt$pt = adata$slingPseudotime_2[!(is.na(adata$slingPseudotime_2))][order(adata$slingPseudotime_2[!(is.na(adata$slingPseudotime_2))])]
neural_pt = slingCurves(adata)$curve1$s[!(is.na(adata$slingPseudotime_1)),]
neural_pt = neural_pt[order(adata$slingPseudotime_1[!(is.na(adata$slingPseudotime_1))]),]
neural_pt =as.data.frame(neural_pt)
neural_pt$pt = adata$slingPseudotime_1[!(is.na(adata$slingPseudotime_1))][order(adata$slingPseudotime_1[!(is.na(adata$slingPseudotime_1))])]
neural_early_pt = slingCurves(adata)$curve3$s[!(is.na(adata$slingPseudotime_3)),]
neural_early_pt = neural_early_pt[order(adata$slingPseudotime_3[!(is.na(adata$slingPseudotime_3))]),]
neural_early_pt =as.data.frame(neural_early_pt)
neural_early_pt$pt = adata$slingPseudotime_3[!(is.na(adata$slingPseudotime_3))][order(adata$slingPseudotime_3[!(is.na(adata$slingPseudotime_3))])]
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point() + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colours = rainbow(5))
print(p)
colors <- colorRampPalette(brewer.pal(11,'Spectral')[-6])(100)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point() + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colors = colors)
print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point() + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colors = colors) + geom_path(data = neural_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +  geom_path(data = neural_early_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1)
print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2), color = "grey") + geom_point() + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colors = colors) + geom_path(data = neural_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +  geom_path(data = neural_early_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1)
print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point(color = "grey") + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colors = colors) + geom_path(data = neural_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +  geom_path(data = neural_early_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1)
print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point(color = "grey") + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colors = colors) + geom_path(data = neural_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +  geom_path(data = neural_early_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1)  + theme_classic()
print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point(color = "white",pch=21) + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colors = colors) + geom_path(data = neural_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +  geom_path(data = neural_early_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1)  + theme_classic()
print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point(color = "white",pch=22) + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colors = colors) + geom_path(data = neural_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +  geom_path(data = neural_early_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1)  + theme_classic()
print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point(color = "#D3D3D3",pch=22) + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colors = colors) + geom_path(data = neural_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +  geom_path(data = neural_early_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1)  + theme_classic()
print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point(color = "black",pch=22) + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colors = colors) + geom_path(data = neural_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +  geom_path(data = neural_early_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1)  + theme_classic()
print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point(color = "#D3D3D3",pch=21) + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colors = colors) + geom_path(data = neural_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +  geom_path(data = neural_early_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1)  + theme_classic()
print(p)
p = ggplot(data = data, aes(x = PC1,y = PC2)) + geom_point(color = "#a9a9a9",pch=21) + geom_path(data = glial_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +scale_color_gradientn(colors = colors) + geom_path(data = neural_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1) +  geom_path(data = neural_early_pt, aes(x = `Dim-1`, y = `Dim-2`,color = pt), size = 1)  + theme_classic()
print(p)
tfs = read.table("/home/anna/software/Antler-master/inst/extdata/Annotations/TF_mmusculus_150722.dat",stringsAsFactors = F)
early_sc = "../../output/DE_pseudotime/GM/neural_early_emb_10_GM_smooth_curves_pseudotime.csv"
late_sc = "../../output/DE_pseudotime/GM/neural_emb_10_GM_smooth_curves_pseudotime.csv"
genes_early =  read.csv("../../output/DE_pseudotime/GM/neural_early_emb_10_GM_de_pseudotime.csv",stringsAsFactors = F)
genes_late =  read.csv("../../output/DE_pseudotime/GM/neural_emb_10_GM_de_pseudotime.csv",stringsAsFactors = F)
return_curves = function(file){
sc = read.table(file, sep = ",")
rownames(sc) = sc$V1
sc$V1 = NULL
sc = as.matrix(sc)
sc =  (sc- rowMin(sc))/(rowMax(sc)-rowMin(sc))
return(sc)
}
early_curves = return_curves(early_sc)
late_curves = return_curves(late_sc)
genes = c(genes_early$X[genes_early$qval<0.05],genes_late$X[genes_late$qval<0.05])
genes = unique(genes)
tfs = read.table("/home/anna/software/Antler-master/inst/extdata/Annotations/TF_mmusculus_150722.dat",stringsAsFactors = F)
genes = genes[genes %in% tfs$gene_name]
genes[!(genes %in% rownames(early_curves))]
#"Irf9" "Dbp"
genes[!(genes %in% rownames(late_curves))]
genes = genes[genes %in% rownames(early_curves) & genes %in% rownames(late_curves)]
early_curves = early_curves[genes,]
late_curves = late_curves[genes,]
curves = cbind(early_curves,late_curves)
85/183.9148
60/163.0446
library(gplots)
breaks = seq(0,1,length = 101)
color.palette = colorRampPalette(c("blue", "white", "red"))
png("../../output/DE_pseudotime/tfs_early_late_2.png", height = 8, width = 10, units = "in", res = 300)
h = heatmap.2(curves, Colv = F, Rowv = T, trace = 'none', breaks = breaks,col = color.palette,
cexRow = 0.8,labCol = F,colsep = c(37,100,146),sepwidth=c(0.2))
dev.off()
tfs = genes[h$rowInd[length(h$rowInd):1]]
rownames(genes_early) = genes_early$X
rownames(genes_late) = genes_late$X
qvals = cbind(-log10(genes_early[tfs,]$qval),-log10(genes_late[tfs,]$qval))
rownames(qvals) = tfs
color.palette = colorRampPalette(c("black","red"))(n=199)
col_breaks = c(seq(0,1.30103,length=100), # for red
seq(1.30104,max(qvals),length=100))
col_breaks = unique(col_breaks)
length(col_breaks)
dim(qvals)
type(qvals)
qvals
png("../../output/DE_pseudotime/tfs_early_late_signif.png", height = 8, width = 4, units = "in", res = 300)
h = heatmap.2(qvals, Colv = F, Rowv = F, trace = 'none', breaks = col_breaks,col = color.palette,
cexRow = 0.8,labCol = F)
dev.off()
prepare_data = function(adata, traj, branch_point = 0){
pseudotime = paste0("slingPseudotime_",traj)
adata = adata[,!is.na(adata[[pseudotime]])]
adata = adata[,order(adata[[pseudotime]])]
adata = adata[,adata[[pseudotime]] > branch_point]
#adata$pseudotime = adata[[pseudotime]] %>% {100*((. - min(.))/(max(.) - min(.)))}
return(adata)
}
## load data
adata = readRDS('../../output/slingshot/adata_start_louvain_semisup.rds')
neuralEarlyPseudoTime = adata$slingPseudotime_3
names(neuralEarlyPseudoTime) = colnames(adata)
save(neuralEarlyPseudoTime, file = "/home/anna/Documents/trajectoryGeometryAnalysis/neuralEarlyPseudoTime.rda")
devtools::install_github("decusinlabore/biologicSC")
library(biologicSC)
library(Seurat)
testObj <- pbmc_small
all.genes <- rownames(testObj)
testObj <- ScaleData(testObj, features = all.genes)
testObj <- RunPCA(testObj, npcs = 3)
testObj <- RunUMAP(testObj, dims = 1:3)
testObj <- FindNeighbors(testObj, dims = 1:3)
testObj <- FindClusters(testObj, resolution = 0.5)
testObj@meta.data[["all"]] <- "all"
params <- scanObjParams(testObj)
seurat2viewer(
obj = testObj,
assay = "RNA",
#slot = "data",
geneSel = NULL,
params = params,
projectName = "pbmc_small_app"
)
library(shiny)
runApp("pbmc_small_app")
setwd("..")
library(shiny)
runApp("pbmc_small_app")
testObj = readRDS("/home/anna/Documents/single_cell_analysis/glia_analysis_updated/output/seurat_object_final.RDS")
params <- scanObjParams(testObj)
seurat2viewer(
obj = testObj,
assay = "RNA",
#slot = "data",
geneSel = NULL,
params = params,
projectName = "glia_app"
)
setwd("..")
library(shiny)
runApp("glia_app")
params <- scanObjParams(testObj)
# seurat2viewer(
#   obj = testObj,
#   assay = "RNA",
#   #slot = "data",
#   geneSel = NULL,
#   params = params,
#   projectName = "pbmc_small_app"
# )
seurat2viewer(
obj = testObj,
assay = "RNA",
#slot = "data",
geneSel = NULL,
params = params,
projectName = "glia_app"
)
setwd("..")
library(shiny)
runApp("glia_app")
seurat2viewer(
obj = testObj,
assay = "RNA",
#slot = "data",
geneSel = NULL,
params = params,
projectName = "pbmc_small_app"
)
runApp("pbmc_small_app")
setwd("..")
runApp("pbmc_small_app")
devtools::install_github("decusinlabore/biologicSC")
library(biologicSC)
library(Seurat)
testObj <- pbmc_small
all.genes <- rownames(testObj)
testObj <- ScaleData(testObj, features = all.genes)
testObj <- RunPCA(testObj, npcs = 3)
testObj <- RunUMAP(testObj, dims = 1:3)
testObj <- FindNeighbors(testObj, dims = 1:3)
testObj <- FindClusters(testObj, resolution = 0.5)
testObj@meta.data[["all"]] <- "all"
#testObj = readRDS("/home/anna/Documents/single_cell_analysis/glia_analysis_updated/output/seurat_object_final.RDS")
params <- scanObjParams(testObj)
seurat2viewer(
obj = testObj,
assay = "RNA",
#slot = "data",
geneSel = NULL,
params = params,
projectName = "pbmc_small_app"
)
# seurat2viewer(
#   obj = testObj,
#   assay = "RNA",
#   #slot = "data",
#   geneSel = NULL,
#   params = params,
#   projectName = "glia_app"
# )
setwd("..")
library(shiny)
runApp("pbmc_small_app")
dat = read.csv('../../vpl195A.result.table.csv', stringsAsFactors = F)
dat = read.csv('../../data/vpl195A.result.table.csv', stringsAsFactors = F)
antler_obj= readRDS("../../output/gene_modules/all_data/antler_obj.RDS")
modules = antler_obj$topCorr_DR$genemodules
head(dat)
names(dat)
samples = names(dat)[65:53]
samples
mat = as.matrix(dat[,samples])
log_mat = log(mat)
log_mat
dim(log_mat)
log_mat = log1p(mat)
head(mat)
rownames(mat) = dat$mgi_symbol
log_mat = log1p(mat)
modules[[16]]
log_mat[modules[[16]],]
modules[[16]][!(modules[[16]] %in% rownames(log_mat))
]
genes = modules[[16]][!(modules[[16]] %in% rownames(log_mat))]
mat_selected = log_mat[genes,]
genes = modules[[16]][modules[[16]] %in% rownames(log_mat)]
mat_selected = log_mat[genes,]
head(mat_selected)
mat_selected = mat_selected - rowMeans(mat_selected)
library(gplots)
heatmap.2(mat_selected)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_selected,Colv = F,Rowv = T, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks, labCol = F)
pdf("../../output/song_early.pdf", width = 20, height = 18)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_selected,Colv = F,Rowv = T, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
mat_selected = log_mat[genes,]
min(mat_selected)
max(mat_selected)
mat_selected = mat_selected - rowMeans(mat_selected)
min(mat_selected)
max(mat_selected)
mat_norm = mat_selected - rowMeans(mat_selected)
library(gplots)
#create heatmap
extreme = (max(abs(min(mat_norm)),abs(max(mat_norm))))
breaks = seq(from=-extreme, to=max(extreme), length.out=100)
pdf("../../output/song_early.pdf", width = 20, height = 18)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_selected,Colv = F,Rowv = T, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
library(matrixStats)
rowSds(mat_selected)
(mat_selected - rowMeans(mat_selected))
mat_norm = (mat_selected - rowMeans(mat_selected))/rowSds(mat_selected)
library(gplots)
#create heatmap
extreme = (max(abs(min(mat_norm)),abs(max(mat_norm))))
breaks = seq(from=-extreme, to=max(extreme), length.out=100)
pdf("../../output/song_early_zscore.pdf", width = 20, height = 18)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_selected,Colv = F,Rowv = T, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
mat_norm = (mat_selected - rowMeans(mat_selected))/(rowMax(mat_selected) - rowMin(mat_selected))
library(gplots)
#create heatmap
extreme = (max(abs(min(mat_norm)),abs(max(mat_norm))))
breaks = seq(from=-extreme, to=max(extreme), length.out=100)
pdf("../../output/song_early_scaled.pdf", width = 20, height = 18)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_selected,Colv = F,Rowv = T, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
tfs = read.table("/home/anna/software/Antler-master/inst/extdata/Annotations/TF_mmusculus_150722.dat",stringsAsFactors = F)
early_sc = "../../output/DE_pseudotime/GM/neural_early_emb_10_GM_smooth_curves_pseudotime.csv"
late_sc = "../../output/DE_pseudotime/GM/neural_emb_10_GM_smooth_curves_pseudotime.csv"
genes_early =  read.csv("../../output/DE_pseudotime/GM/neural_early_emb_10_GM_de_pseudotime.csv",stringsAsFactors = F)
genes_late =  read.csv("../../output/DE_pseudotime/GM/neural_emb_10_GM_de_pseudotime.csv",stringsAsFactors = F)
return_curves = function(file){
sc = read.table(file, sep = ",")
rownames(sc) = sc$V1
sc$V1 = NULL
sc = as.matrix(sc)
sc =  (sc- rowMin(sc))/(rowMax(sc)-rowMin(sc))
return(sc)
}
early_curves = return_curves(early_sc)
late_curves = return_curves(late_sc)
genes = c(genes_early$X[genes_early$qval<0.05],genes_late$X[genes_late$qval<0.05])
genes = unique(genes)
tfs = read.table("/home/anna/software/Antler-master/inst/extdata/Annotations/TF_mmusculus_150722.dat",stringsAsFactors = F)
genes = genes[genes %in% tfs$gene_name]
genes[!(genes %in% rownames(early_curves))]
#"Irf9" "Dbp"
genes[!(genes %in% rownames(late_curves))]
genes = genes[genes %in% rownames(early_curves) & genes %in% rownames(late_curves)]
early_curves = early_curves[genes,]
late_curves = late_curves[genes,]
curves = cbind(early_curves,late_curves)
85/183.9148
60/163.0446
library(gplots)
breaks = seq(0,1,length = 101)
color.palette = colorRampPalette(c("blue", "white", "red"))
png("../../output/DE_pseudotime/tfs_early_late_2.png", height = 8, width = 10, units = "in", res = 300)
h = heatmap.2(curves, Colv = F, Rowv = T, trace = 'none', breaks = breaks,col = color.palette,
cexRow = 0.8,labCol = F,colsep = c(37,100,146),sepwidth=c(0.2))
dev.off()
tfs = genes[h$rowInd[length(h$rowInd):1]]
tfs
write.csv("../../output/DE_pseudotime/tf_list.csv", row.names = F, quote = F)
tfs = read.csv("../../output/DE_pseudotime/tf_list.csv")
write.csv("../../output/DE_pseudotime/tf_list.csv", row.names = F, quote = F)
write.csv(tfs,"../../output/DE_pseudotime/tf_list.csv", row.names = F, quote = F)
tfs = read.csv("../../output/DE_pseudotime/tf_list.csv")
tfs
mat_selected = log_mat[tfs,]
mat_selected = log_mat[tfs$x,]
mat_norm = mat_selected - rowMeans(mat_selected)
png("../../output/DE_pseudotime/tfs_song.png", height = 8, width = 4, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = T,Rowv = T, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
png("../../output/DE_pseudotime/tfs_song.png", height = 8, width = 4, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = T,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
tfs$x
mat_selected = log_mat[as.character(tfs$x),]
mat_norm = mat_selected - rowMeans(mat_selected)
library(gplots)
#create heatmap
extreme = (max(abs(min(mat_norm)),abs(max(mat_norm))))
breaks = seq(from=-extreme, to=max(extreme), length.out=100)
png("../../output/DE_pseudotime/tfs_song.png", height = 8, width = 4, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = T,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
png("../../output/DE_pseudotime/tfs_song.png", height = 8, width = 4, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = F,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
png("../../output/DE_pseudotime/tfs_song.png", height = 8, width = 4, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = F,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.5,cex.col = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
png("../../output/DE_pseudotime/tfs_song.png", height = 8, width = 4, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = F,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.5,cexCol = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
png("../../output/DE_pseudotime/tfs_song.png", height = 8, width = 4, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = F,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.8,cexCol = 0.8, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
png("../../output/DE_pseudotime/tfs_song.png",height = 8, width = 6, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = F,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.8,cexCol = 0.8, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
png("../../output/DE_pseudotime/tfs_song.png",height = 8, width = 6, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = F,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.8,cexCol = 0.8,col=color.palette, breaks = breaks)
dev.off()
png("../../output/DE_pseudotime/tfs_song.png",height = 8, width = 4, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = F,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.8,cexCol = 0.8,col=color.palette, breaks = breaks)
dev.off()
dat = read.csv('../../data/vpl195A.result.table.csv', stringsAsFactors = F)
antler_obj= readRDS("../../output/gene_modules/all_data/antler_obj.RDS")
modules = antler_obj$topCorr_DR$genemodules
samples = names(dat)[65:53]
mat = as.matrix(dat[,samples])
rownames(mat) = dat$mgi_symbol
log_mat = log1p(mat)
modules[[16]][!(modules[[16]] %in% rownames(log_mat))]
# "Cemip2"
genes = modules[[16]][modules[[16]] %in% rownames(log_mat)]
mat_selected = log_mat[genes,]
library(matrixStats)
mat_norm = mat_selected - rowMeans(mat_selected)
head(dat)
dat[,dat$mgi_symbol == "Csde1"]
dat[dat$mgi_symbol == "Csde1",]
grep("padj",rownames(dat))
grep("padj",colnames(dat))
colnames(dat)[grep("padj",colnames(dat))]
colnames(dat)[grep("padj_D",colnames(dat))]
padj = colnames(dat)[grep("padj_D",colnames(dat))]
dat[dat$mgi_symbol == "Csde1",padj]
dat[dat$mgi_symbol == "Peg12",padj]
dat[dat$mgi_symbol == "Sox11",padj]
dat[dat$mgi_symbol == "Hmga2",padj]
dat[dat$mgi_symbol == "Set",padj]
tfs = read.csv("../../output/DE_pseudotime/tf_list.csv")
mat_selected = log_mat[as.character(tfs$x),]
mat_norm = mat_selected - rowMeans(mat_selected)
library(gplots)
#create heatmap
extreme = (max(abs(min(mat_norm)),abs(max(mat_norm))))
breaks = seq(from=-extreme, to=max(extreme), length.out=100)
png("../../output/DE_pseudotime/tfs_song.png",height = 8, width = 4, units = "in", res = 300)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_norm,Colv = F,Rowv = F, symbreak=TRUE, trace='none',
cexRow = 0.8,cexCol = 0.8,col=color.palette, breaks = breaks)
dev.off()
dat[dat$mgi_symbol == "Set",padj] < 0.05
sum(dat[dat$mgi_symbol == "Set",padj] < 0.05)
rowSums(dat[dat$mgi_symbol == "Set",padj] < 0.05)
rowSums(dat[,padj] < 0.05)
dat = read.csv('../../data/vpl195A.result.table.csv', stringsAsFactors = F)
antler_obj= readRDS("../../output/gene_modules/all_data/antler_obj.RDS")
modules = antler_obj$topCorr_DR$genemodules
samples = names(dat)[65:53]
padj = colnames(dat)[grep("padj_D",colnames(dat))]
rowSums(dat[,padj] < 0.05)
dat = dat[rowSums(dat[,padj] < 0.05)>0,]
mat = as.matrix(dat[,samples])
rownames(mat) = dat$mgi_symbol
log_mat = log1p(mat)
modules[[16]][!(modules[[16]] %in% rownames(log_mat))]
dim(dat)
rowSums(dat[,padj] < 0.05)
dat[dat$mgi_symbol == "Peg12",padj]
antler_obj= readRDS("../../output/gene_modules/all_data/antler_obj.RDS")
modules = antler_obj$topCorr_DR$genemodules
dat = read.csv('../../data/vpl195A.result.table.csv', stringsAsFactors = F)
samples = names(dat)[65:53]
padj = colnames(dat)[grep("padj_D",colnames(dat))]
dat = dat[rowSums(dat[,padj] < 0.05)>0,]
mat = as.matrix(dat[,samples])
rownames(mat) = dat$mgi_symbol
log_mat = log1p(mat)
modules[[16]][!(modules[[16]] %in% rownames(log_mat))]
# "Cemip2"
#[1] "Arglu1"  "Arl14ep" "Birc6"   "Cemip2"  "Crebbp"  "Gmps"    "Hnrnpa0" "Klhl9"   "Krit1"   "Lrrc58"  "Mau2"    "Ogdhl"   "Pfas"
#[14] "Skil"    "Sox11"   "Srek1"   "Tbck"    "Tspyl1"  "Tug1"    "Usp37"   "Zfhx3"   "Zfp691"  "Zfp868"
genes = modules[[16]][modules[[16]] %in% rownames(log_mat)]
mat_selected = log_mat[genes,]
library(matrixStats)
mat_norm = mat_selected - rowMeans(mat_selected)
library(gplots)
#create heatmap
extreme = (max(abs(min(mat_norm)),abs(max(mat_norm))))
breaks = seq(from=-extreme, to=max(extreme), length.out=100)
pdf("../../output/song_early_significant.pdf", width = 20, height = 18)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_selected,Colv = F,Rowv = T, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
mat_norm
library(gplots)
#create heatmap
extreme = (max(abs(min(mat_norm)),abs(max(mat_norm))))
breaks = seq(from=-extreme, to=max(extreme), length.out=100)
pdf("../../output/song_early_significant.pdf", width = 20, height = 18)
color.palette = colorRampPalette(c("blue", "white", "red"))
heatmap.2(mat_selected,Colv = F,Rowv = T, symbreak=TRUE, trace='none',
cexRow = 0.5, margins =c(12,9),col=color.palette, breaks = breaks)
dev.off()
modules[[16]][!(modules[[16]] %in% rownames(log_mat))]
imag(mat_norm)
image(mat_norm)
dat = read.csv('../../data/vpl195A.result.table.csv', stringsAsFactors = F)
samples = names(dat)[65:53]
padj = colnames(dat)[grep("padj_D",colnames(dat))]
dim(dat)
dat = dat[rowSums(dat[,padj] < 0.05)>0,]
dim(dat)
mat = as.matrix(dat[,samples])
rownames(mat) = dat$mgi_symbol
9.5 * 3 * 5.25
install.packages('rmarkdown')
install.packages('rmarkdown')
setwd("/home/anna/Documents/TrajectoryGeometry")
devtools::build_vignettes()
updateR()
